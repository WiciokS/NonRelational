@page
@model QuizModel
@using System.Text.Json;

@{
    ViewData["Title"] = "Quiz - " + Model.SelectedTheme?.Theme;
}

<h2>@Model.SelectedTheme?.Theme</h2>

<!-- Placeholders for dynamic content -->
<div id="counter"></div>
<div id="score"></div>
<div id="question"></div>
<div id="answers"></div>
<button type="button" id="next-question" class="next-btn" onclick="nextQuestion()">Next</button>


@section Scripts {
    <script>
        var themeData = @Html.Raw(Json.Serialize(Model.SelectedTheme));
        var currentQuestionIndex = 0; // Start with the first question
        var score = 0;

        document.addEventListener('DOMContentLoaded', function () {
            processQuestion(currentQuestionIndex);
        });

        function selectAnswer(button, answer) {
            var correctAnswer = themeData.questions[currentQuestionIndex].answers.find(a => a.isCorrect).answer;
            var isCorrect = answer === correctAnswer;

            // Clear any previous selection
            document.querySelectorAll('.answer-btn').forEach(btn => btn.disabled = true);

            // Mark the button as selected
            button.classList.add('selected');

            // Check if the answer is correct and apply the appropriate class
            button.classList.add(isCorrect ? 'correct' : 'incorrect');

            // Enable the Next button
            document.querySelector('#next-question').disabled = false;

            if (isCorrect) {
                // Increment score
                score++;
                console.log("Score: " + score); // Optional: for debugging
            } else {
                // Optionally show the correct answer
                themeData.questions[currentQuestionIndex].answers.forEach(answer => {
                    if (answer.isCorrect) {
                        [...document.querySelectorAll('.answer-btn')].forEach(btn => {
                            if (btn.innerText === answer.answer) {
                                btn.classList.add('correct');
                            }
                        });
                    }
                });
            }
        }
        function nextQuestion(button) {
            currentQuestionIndex += 1; // Move to the next question
            processQuestion(currentQuestionIndex);
        }
        function processQuestion(index) {
            if (index >= themeData.questions.length) {
                // No more questions or invalid index, prepare to redirect
                var totalQuestions = themeData.questions.length;
                // Construct the URL for the results page with query parameters for score and total questions
                var resultsUrl = `/Results?score=${score}&total=${totalQuestions}`;
                // Redirect to the results page
                window.location.href = resultsUrl;
                return;
            }

            var questionData = themeData.questions[index];

            // Update question text
            document.getElementById('question').innerHTML = `<p>${questionData.question}</p>`;

            // Clear and repopulate answers
            var answersDiv = document.getElementById('answers');
            answersDiv.innerHTML = ''; // Clear existing answers
            questionData.answers.forEach(answer => {
                var button = document.createElement('button');
                button.type = 'button';
                button.className = 'answer-btn';
                button.innerText = answer.answer;
                button.onclick = function () { selectAnswer(this, answer.answer); };
                answersDiv.appendChild(button);
            });

            // Update counter
            document.getElementById('counter').innerHTML = `<p>Question ${index + 1} of ${themeData.questions.length}</p>`;

            // Update score
            document.getElementById('score').innerHTML = `<p>Score: ${score}</p>`;

            // Disable the Next button
            document.querySelector('#next-question').disabled = true;
        }
    </script>
    <style>
        .correct {
            background-color: green;
        }

        .incorrect {
            background-color: red;
        }

        .selected {
            font-weight: bold;
        }
    </style>
}
